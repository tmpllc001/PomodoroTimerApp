name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']
        include:
          - os: windows-latest
            python-version: '3.11'
            windows-specific: true

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libgl1-mesa-glx
        sudo apt-get install -y libasound2-dev pulseaudio
        # Start virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install audio dependencies for macOS
        brew install portaudio
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xvfb pytest-benchmark pytest-mock
        pip install psutil  # For performance tests
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Run linting and code quality
      run: |
        pip install flake8 black isort mypy
        # Linting
        flake8 src tests --max-line-length=100 --ignore=E203,W503,F401
        # Code formatting check
        black --check src tests --line-length=100
        # Import sorting check
        isort --check-only src tests --profile black
        # Type checking (if type hints are added)
        # mypy src --ignore-missing-imports || true
    
    - name: Run unit tests
      run: |
        pytest tests/test_timer_model.py tests/test_audio_manager.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/src
    
    - name: Run integration tests (Linux)
      if: runner.os == 'Linux'
      run: |
        pytest tests/test_timer_controller.py tests/test_e2e_scenarios.py -v --tb=short
      env:
        DISPLAY: ':99.0'
        QT_QPA_PLATFORM: offscreen
        PYTHONPATH: ${{ github.workspace }}/src
    
    - name: Run Windows-specific tests
      if: matrix.windows-specific == true
      run: |
        pytest tests/test_windows_compatibility.py -v --tb=short -m "not slow"
      env:
        PYTHONPATH: ${{ github.workspace }}/src
    
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v --tb=short -m "not benchmark"
      env:
        PYTHONPATH: ${{ github.workspace }}/src
    
    - name: Run tests with coverage
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      run: |
        python test_runner.py
        # pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-fail-under=85 --tb=short
      env:
        DISPLAY: ':99.0'
        QT_QPA_PLATFORM: offscreen
        PYTHONPATH: ${{ github.workspace }}/src
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run security checks
      run: |
        safety check
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  build:
    needs: [test, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install PyInstaller auto-py-to-exe
    
    - name: Create build directories
      run: |
        mkdir -p dist
        mkdir -p build
    
    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed --name="PomodoroTimer" ^
          --icon=assets/images/icon.ico ^
          --add-data="assets;assets" ^
          --add-data="config;config" ^
          --hidden-import=PyQt6.QtCore ^
          --hidden-import=PyQt6.QtGui ^
          --hidden-import=PyQt6.QtWidgets ^
          --hidden-import=pygame ^
          --distpath=dist/windows ^
          main.py
    
    - name: Build executable (Linux)
      if: runner.os == 'Linux'
      run: |
        pyinstaller --onefile --windowed --name="PomodoroTimer" \
          --add-data="assets:assets" \
          --add-data="config:config" \
          --hidden-import=PyQt6.QtCore \
          --hidden-import=PyQt6.QtGui \
          --hidden-import=PyQt6.QtWidgets \
          --hidden-import=pygame \
          --distpath=dist/linux \
          main.py
    
    - name: Build executable (macOS)
      if: runner.os == 'macOS'
      run: |
        pyinstaller --onefile --windowed --name="PomodoroTimer" \
          --add-data="assets:assets" \
          --add-data="config:config" \
          --hidden-import=PyQt6.QtCore \
          --hidden-import=PyQt6.QtGui \
          --hidden-import=PyQt6.QtWidgets \
          --hidden-import=pygame \
          --distpath=dist/macos \
          main.py
    
    - name: Create portable package (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir -p dist/windows/portable
        copy dist/windows/PomodoroTimer.exe dist/windows/portable/
        copy -r assets dist/windows/portable/
        copy -r config dist/windows/portable/
        copy README.md dist/windows/portable/
        copy LICENSE dist/windows/portable/
    
    - name: Create portable package (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p dist/linux/portable
        cp dist/linux/PomodoroTimer dist/linux/portable/
        cp -r assets dist/linux/portable/
        cp -r config dist/linux/portable/
        cp README.md dist/linux/portable/
        cp LICENSE dist/linux/portable/
        chmod +x dist/linux/portable/PomodoroTimer
    
    - name: Create app bundle (macOS)
      if: runner.os == 'macOS'
      run: |
        mkdir -p dist/macos/PomodoroTimer.app/Contents/MacOS
        mkdir -p dist/macos/PomodoroTimer.app/Contents/Resources
        cp dist/macos/PomodoroTimer dist/macos/PomodoroTimer.app/Contents/MacOS/
        cp -r assets dist/macos/PomodoroTimer.app/Contents/Resources/
        cp -r config dist/macos/PomodoroTimer.app/Contents/Resources/
        
        # Create Info.plist
        cat > dist/macos/PomodoroTimer.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleName</key>
            <string>Pomodoro Timer</string>
            <key>CFBundleExecutable</key>
            <string>PomodoroTimer</string>
            <key>CFBundleIdentifier</key>
            <string>com.pomodoro.timer</string>
            <key>CFBundleVersion</key>
            <string>1.0.0</string>
        </dict>
        </plist>
        EOF
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pomodoro-timer-${{ matrix.os }}
        path: dist/
        retention-days: 30

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./pomodoro-timer-ubuntu-latest/PomodoroTimer
        asset_name: PomodoroTimer-Linux
        asset_content_type: application/octet-stream